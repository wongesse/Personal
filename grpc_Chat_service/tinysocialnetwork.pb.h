// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tinysocialnetwork.proto

#ifndef PROTOBUF_tinysocialnetwork_2eproto__INCLUDED
#define PROTOBUF_tinysocialnetwork_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_tinysocialnetwork_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCreateRequestImpl();
void InitDefaultsCreateRequest();
void InitDefaultsCreateReplyImpl();
void InitDefaultsCreateReply();
void InitDefaultsUserRequestImpl();
void InitDefaultsUserRequest();
void InitDefaultsUserReplyImpl();
void InitDefaultsUserReply();
void InitDefaultsListRequestImpl();
void InitDefaultsListRequest();
void InitDefaultsListReplyImpl();
void InitDefaultsListReply();
void InitDefaultsTimelineStreamImpl();
void InitDefaultsTimelineStream();
inline void InitDefaults() {
  InitDefaultsCreateRequest();
  InitDefaultsCreateReply();
  InitDefaultsUserRequest();
  InitDefaultsUserReply();
  InitDefaultsListRequest();
  InitDefaultsListReply();
  InitDefaultsTimelineStream();
}
}  // namespace protobuf_tinysocialnetwork_2eproto
namespace tinysocialnetwork {
class CreateReply;
class CreateReplyDefaultTypeInternal;
extern CreateReplyDefaultTypeInternal _CreateReply_default_instance_;
class CreateRequest;
class CreateRequestDefaultTypeInternal;
extern CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
class ListReply;
class ListReplyDefaultTypeInternal;
extern ListReplyDefaultTypeInternal _ListReply_default_instance_;
class ListRequest;
class ListRequestDefaultTypeInternal;
extern ListRequestDefaultTypeInternal _ListRequest_default_instance_;
class TimelineStream;
class TimelineStreamDefaultTypeInternal;
extern TimelineStreamDefaultTypeInternal _TimelineStream_default_instance_;
class UserReply;
class UserReplyDefaultTypeInternal;
extern UserReplyDefaultTypeInternal _UserReply_default_instance_;
class UserRequest;
class UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
}  // namespace tinysocialnetwork
namespace tinysocialnetwork {

// ===================================================================

class CreateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinysocialnetwork.CreateRequest) */ {
 public:
  CreateRequest();
  virtual ~CreateRequest();

  CreateRequest(const CreateRequest& from);

  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateRequest(CreateRequest&& from) noexcept
    : CreateRequest() {
    *this = ::std::move(from);
  }

  inline CreateRequest& operator=(CreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRequest*>(
               &_CreateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CreateRequest* other);
  friend void swap(CreateRequest& a, CreateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateRequest& from);
  void MergeFrom(const CreateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:tinysocialnetwork.CreateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  mutable int _cached_size_;
  friend struct ::protobuf_tinysocialnetwork_2eproto::TableStruct;
  friend void ::protobuf_tinysocialnetwork_2eproto::InitDefaultsCreateRequestImpl();
};
// -------------------------------------------------------------------

class CreateReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinysocialnetwork.CreateReply) */ {
 public:
  CreateReply();
  virtual ~CreateReply();

  CreateReply(const CreateReply& from);

  inline CreateReply& operator=(const CreateReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateReply(CreateReply&& from) noexcept
    : CreateReply() {
    *this = ::std::move(from);
  }

  inline CreateReply& operator=(CreateReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateReply* internal_default_instance() {
    return reinterpret_cast<const CreateReply*>(
               &_CreateReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CreateReply* other);
  friend void swap(CreateReply& a, CreateReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateReply* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateReply& from);
  void MergeFrom(const CreateReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:tinysocialnetwork.CreateReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  mutable int _cached_size_;
  friend struct ::protobuf_tinysocialnetwork_2eproto::TableStruct;
  friend void ::protobuf_tinysocialnetwork_2eproto::InitDefaultsCreateReplyImpl();
};
// -------------------------------------------------------------------

class UserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinysocialnetwork.UserRequest) */ {
 public:
  UserRequest();
  virtual ~UserRequest();

  UserRequest(const UserRequest& from);

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRequest(UserRequest&& from) noexcept
    : UserRequest() {
    *this = ::std::move(from);
  }

  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(UserRequest* other);
  friend void swap(UserRequest& a, UserRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UserRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserRequest& from);
  void MergeFrom(const UserRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string requestuser = 1;
  void clear_requestuser();
  static const int kRequestuserFieldNumber = 1;
  const ::std::string& requestuser() const;
  void set_requestuser(const ::std::string& value);
  #if LANG_CXX11
  void set_requestuser(::std::string&& value);
  #endif
  void set_requestuser(const char* value);
  void set_requestuser(const char* value, size_t size);
  ::std::string* mutable_requestuser();
  ::std::string* release_requestuser();
  void set_allocated_requestuser(::std::string* requestuser);

  // string targetuser = 2;
  void clear_targetuser();
  static const int kTargetuserFieldNumber = 2;
  const ::std::string& targetuser() const;
  void set_targetuser(const ::std::string& value);
  #if LANG_CXX11
  void set_targetuser(::std::string&& value);
  #endif
  void set_targetuser(const char* value);
  void set_targetuser(const char* value, size_t size);
  ::std::string* mutable_targetuser();
  ::std::string* release_targetuser();
  void set_allocated_targetuser(::std::string* targetuser);

  // @@protoc_insertion_point(class_scope:tinysocialnetwork.UserRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr requestuser_;
  ::google::protobuf::internal::ArenaStringPtr targetuser_;
  mutable int _cached_size_;
  friend struct ::protobuf_tinysocialnetwork_2eproto::TableStruct;
  friend void ::protobuf_tinysocialnetwork_2eproto::InitDefaultsUserRequestImpl();
};
// -------------------------------------------------------------------

class UserReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinysocialnetwork.UserReply) */ {
 public:
  UserReply();
  virtual ~UserReply();

  UserReply(const UserReply& from);

  inline UserReply& operator=(const UserReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserReply(UserReply&& from) noexcept
    : UserReply() {
    *this = ::std::move(from);
  }

  inline UserReply& operator=(UserReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserReply* internal_default_instance() {
    return reinterpret_cast<const UserReply*>(
               &_UserReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(UserReply* other);
  friend void swap(UserReply& a, UserReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserReply* New() const PROTOBUF_FINAL { return New(NULL); }

  UserReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserReply& from);
  void MergeFrom(const UserReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:tinysocialnetwork.UserReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  mutable int _cached_size_;
  friend struct ::protobuf_tinysocialnetwork_2eproto::TableStruct;
  friend void ::protobuf_tinysocialnetwork_2eproto::InitDefaultsUserReplyImpl();
};
// -------------------------------------------------------------------

class ListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinysocialnetwork.ListRequest) */ {
 public:
  ListRequest();
  virtual ~ListRequest();

  ListRequest(const ListRequest& from);

  inline ListRequest& operator=(const ListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListRequest(ListRequest&& from) noexcept
    : ListRequest() {
    *this = ::std::move(from);
  }

  inline ListRequest& operator=(ListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRequest* internal_default_instance() {
    return reinterpret_cast<const ListRequest*>(
               &_ListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ListRequest* other);
  friend void swap(ListRequest& a, ListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListRequest& from);
  void MergeFrom(const ListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:tinysocialnetwork.ListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  mutable int _cached_size_;
  friend struct ::protobuf_tinysocialnetwork_2eproto::TableStruct;
  friend void ::protobuf_tinysocialnetwork_2eproto::InitDefaultsListRequestImpl();
};
// -------------------------------------------------------------------

class ListReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinysocialnetwork.ListReply) */ {
 public:
  ListReply();
  virtual ~ListReply();

  ListReply(const ListReply& from);

  inline ListReply& operator=(const ListReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListReply(ListReply&& from) noexcept
    : ListReply() {
    *this = ::std::move(from);
  }

  inline ListReply& operator=(ListReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListReply* internal_default_instance() {
    return reinterpret_cast<const ListReply*>(
               &_ListReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ListReply* other);
  friend void swap(ListReply& a, ListReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListReply* New() const PROTOBUF_FINAL { return New(NULL); }

  ListReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListReply& from);
  void MergeFrom(const ListReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string users = 1;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 1;
  const ::std::string& users(int index) const;
  ::std::string* mutable_users(int index);
  void set_users(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_users(int index, ::std::string&& value);
  #endif
  void set_users(int index, const char* value);
  void set_users(int index, const char* value, size_t size);
  ::std::string* add_users();
  void add_users(const ::std::string& value);
  #if LANG_CXX11
  void add_users(::std::string&& value);
  #endif
  void add_users(const char* value);
  void add_users(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& users() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_users();

  // repeated string followers = 2;
  int followers_size() const;
  void clear_followers();
  static const int kFollowersFieldNumber = 2;
  const ::std::string& followers(int index) const;
  ::std::string* mutable_followers(int index);
  void set_followers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_followers(int index, ::std::string&& value);
  #endif
  void set_followers(int index, const char* value);
  void set_followers(int index, const char* value, size_t size);
  ::std::string* add_followers();
  void add_followers(const ::std::string& value);
  #if LANG_CXX11
  void add_followers(::std::string&& value);
  #endif
  void add_followers(const char* value);
  void add_followers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& followers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_followers();

  // string status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:tinysocialnetwork.ListReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> users_;
  ::google::protobuf::RepeatedPtrField< ::std::string> followers_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  mutable int _cached_size_;
  friend struct ::protobuf_tinysocialnetwork_2eproto::TableStruct;
  friend void ::protobuf_tinysocialnetwork_2eproto::InitDefaultsListReplyImpl();
};
// -------------------------------------------------------------------

class TimelineStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tinysocialnetwork.TimelineStream) */ {
 public:
  TimelineStream();
  virtual ~TimelineStream();

  TimelineStream(const TimelineStream& from);

  inline TimelineStream& operator=(const TimelineStream& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimelineStream(TimelineStream&& from) noexcept
    : TimelineStream() {
    *this = ::std::move(from);
  }

  inline TimelineStream& operator=(TimelineStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimelineStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimelineStream* internal_default_instance() {
    return reinterpret_cast<const TimelineStream*>(
               &_TimelineStream_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(TimelineStream* other);
  friend void swap(TimelineStream& a, TimelineStream& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimelineStream* New() const PROTOBUF_FINAL { return New(NULL); }

  TimelineStream* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimelineStream& from);
  void MergeFrom(const TimelineStream& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimelineStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string post = 2;
  void clear_post();
  static const int kPostFieldNumber = 2;
  const ::std::string& post() const;
  void set_post(const ::std::string& value);
  #if LANG_CXX11
  void set_post(::std::string&& value);
  #endif
  void set_post(const char* value);
  void set_post(const char* value, size_t size);
  ::std::string* mutable_post();
  ::std::string* release_post();
  void set_allocated_post(::std::string* post);

  // string time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // @@protoc_insertion_point(class_scope:tinysocialnetwork.TimelineStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr post_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  mutable int _cached_size_;
  friend struct ::protobuf_tinysocialnetwork_2eproto::TableStruct;
  friend void ::protobuf_tinysocialnetwork_2eproto::InitDefaultsTimelineStreamImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateRequest

// string username = 1;
inline void CreateRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateRequest::username() const {
  // @@protoc_insertion_point(field_get:tinysocialnetwork.CreateRequest.username)
  return username_.GetNoArena();
}
inline void CreateRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinysocialnetwork.CreateRequest.username)
}
#if LANG_CXX11
inline void CreateRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tinysocialnetwork.CreateRequest.username)
}
#endif
inline void CreateRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinysocialnetwork.CreateRequest.username)
}
inline void CreateRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinysocialnetwork.CreateRequest.username)
}
inline ::std::string* CreateRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:tinysocialnetwork.CreateRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateRequest::release_username() {
  // @@protoc_insertion_point(field_release:tinysocialnetwork.CreateRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tinysocialnetwork.CreateRequest.username)
}

// -------------------------------------------------------------------

// CreateReply

// string status = 1;
inline void CreateReply::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateReply::status() const {
  // @@protoc_insertion_point(field_get:tinysocialnetwork.CreateReply.status)
  return status_.GetNoArena();
}
inline void CreateReply::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinysocialnetwork.CreateReply.status)
}
#if LANG_CXX11
inline void CreateReply::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tinysocialnetwork.CreateReply.status)
}
#endif
inline void CreateReply::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinysocialnetwork.CreateReply.status)
}
inline void CreateReply::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinysocialnetwork.CreateReply.status)
}
inline ::std::string* CreateReply::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tinysocialnetwork.CreateReply.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateReply::release_status() {
  // @@protoc_insertion_point(field_release:tinysocialnetwork.CreateReply.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateReply::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tinysocialnetwork.CreateReply.status)
}

// -------------------------------------------------------------------

// UserRequest

// string requestuser = 1;
inline void UserRequest::clear_requestuser() {
  requestuser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRequest::requestuser() const {
  // @@protoc_insertion_point(field_get:tinysocialnetwork.UserRequest.requestuser)
  return requestuser_.GetNoArena();
}
inline void UserRequest::set_requestuser(const ::std::string& value) {
  
  requestuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinysocialnetwork.UserRequest.requestuser)
}
#if LANG_CXX11
inline void UserRequest::set_requestuser(::std::string&& value) {
  
  requestuser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tinysocialnetwork.UserRequest.requestuser)
}
#endif
inline void UserRequest::set_requestuser(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  requestuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinysocialnetwork.UserRequest.requestuser)
}
inline void UserRequest::set_requestuser(const char* value, size_t size) {
  
  requestuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinysocialnetwork.UserRequest.requestuser)
}
inline ::std::string* UserRequest::mutable_requestuser() {
  
  // @@protoc_insertion_point(field_mutable:tinysocialnetwork.UserRequest.requestuser)
  return requestuser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRequest::release_requestuser() {
  // @@protoc_insertion_point(field_release:tinysocialnetwork.UserRequest.requestuser)
  
  return requestuser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRequest::set_allocated_requestuser(::std::string* requestuser) {
  if (requestuser != NULL) {
    
  } else {
    
  }
  requestuser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requestuser);
  // @@protoc_insertion_point(field_set_allocated:tinysocialnetwork.UserRequest.requestuser)
}

// string targetuser = 2;
inline void UserRequest::clear_targetuser() {
  targetuser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRequest::targetuser() const {
  // @@protoc_insertion_point(field_get:tinysocialnetwork.UserRequest.targetuser)
  return targetuser_.GetNoArena();
}
inline void UserRequest::set_targetuser(const ::std::string& value) {
  
  targetuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinysocialnetwork.UserRequest.targetuser)
}
#if LANG_CXX11
inline void UserRequest::set_targetuser(::std::string&& value) {
  
  targetuser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tinysocialnetwork.UserRequest.targetuser)
}
#endif
inline void UserRequest::set_targetuser(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  targetuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinysocialnetwork.UserRequest.targetuser)
}
inline void UserRequest::set_targetuser(const char* value, size_t size) {
  
  targetuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinysocialnetwork.UserRequest.targetuser)
}
inline ::std::string* UserRequest::mutable_targetuser() {
  
  // @@protoc_insertion_point(field_mutable:tinysocialnetwork.UserRequest.targetuser)
  return targetuser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRequest::release_targetuser() {
  // @@protoc_insertion_point(field_release:tinysocialnetwork.UserRequest.targetuser)
  
  return targetuser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRequest::set_allocated_targetuser(::std::string* targetuser) {
  if (targetuser != NULL) {
    
  } else {
    
  }
  targetuser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetuser);
  // @@protoc_insertion_point(field_set_allocated:tinysocialnetwork.UserRequest.targetuser)
}

// -------------------------------------------------------------------

// UserReply

// string status = 1;
inline void UserReply::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserReply::status() const {
  // @@protoc_insertion_point(field_get:tinysocialnetwork.UserReply.status)
  return status_.GetNoArena();
}
inline void UserReply::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinysocialnetwork.UserReply.status)
}
#if LANG_CXX11
inline void UserReply::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tinysocialnetwork.UserReply.status)
}
#endif
inline void UserReply::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinysocialnetwork.UserReply.status)
}
inline void UserReply::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinysocialnetwork.UserReply.status)
}
inline ::std::string* UserReply::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tinysocialnetwork.UserReply.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserReply::release_status() {
  // @@protoc_insertion_point(field_release:tinysocialnetwork.UserReply.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserReply::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tinysocialnetwork.UserReply.status)
}

// -------------------------------------------------------------------

// ListRequest

// string username = 1;
inline void ListRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListRequest::username() const {
  // @@protoc_insertion_point(field_get:tinysocialnetwork.ListRequest.username)
  return username_.GetNoArena();
}
inline void ListRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinysocialnetwork.ListRequest.username)
}
#if LANG_CXX11
inline void ListRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tinysocialnetwork.ListRequest.username)
}
#endif
inline void ListRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinysocialnetwork.ListRequest.username)
}
inline void ListRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinysocialnetwork.ListRequest.username)
}
inline ::std::string* ListRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:tinysocialnetwork.ListRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListRequest::release_username() {
  // @@protoc_insertion_point(field_release:tinysocialnetwork.ListRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tinysocialnetwork.ListRequest.username)
}

// -------------------------------------------------------------------

// ListReply

// repeated string users = 1;
inline int ListReply::users_size() const {
  return users_.size();
}
inline void ListReply::clear_users() {
  users_.Clear();
}
inline const ::std::string& ListReply::users(int index) const {
  // @@protoc_insertion_point(field_get:tinysocialnetwork.ListReply.users)
  return users_.Get(index);
}
inline ::std::string* ListReply::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:tinysocialnetwork.ListReply.users)
  return users_.Mutable(index);
}
inline void ListReply::set_users(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tinysocialnetwork.ListReply.users)
  users_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListReply::set_users(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tinysocialnetwork.ListReply.users)
  users_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListReply::set_users(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tinysocialnetwork.ListReply.users)
}
inline void ListReply::set_users(int index, const char* value, size_t size) {
  users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinysocialnetwork.ListReply.users)
}
inline ::std::string* ListReply::add_users() {
  // @@protoc_insertion_point(field_add_mutable:tinysocialnetwork.ListReply.users)
  return users_.Add();
}
inline void ListReply::add_users(const ::std::string& value) {
  users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tinysocialnetwork.ListReply.users)
}
#if LANG_CXX11
inline void ListReply::add_users(::std::string&& value) {
  users_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tinysocialnetwork.ListReply.users)
}
#endif
inline void ListReply::add_users(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tinysocialnetwork.ListReply.users)
}
inline void ListReply::add_users(const char* value, size_t size) {
  users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tinysocialnetwork.ListReply.users)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListReply::users() const {
  // @@protoc_insertion_point(field_list:tinysocialnetwork.ListReply.users)
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListReply::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:tinysocialnetwork.ListReply.users)
  return &users_;
}

// repeated string followers = 2;
inline int ListReply::followers_size() const {
  return followers_.size();
}
inline void ListReply::clear_followers() {
  followers_.Clear();
}
inline const ::std::string& ListReply::followers(int index) const {
  // @@protoc_insertion_point(field_get:tinysocialnetwork.ListReply.followers)
  return followers_.Get(index);
}
inline ::std::string* ListReply::mutable_followers(int index) {
  // @@protoc_insertion_point(field_mutable:tinysocialnetwork.ListReply.followers)
  return followers_.Mutable(index);
}
inline void ListReply::set_followers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tinysocialnetwork.ListReply.followers)
  followers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListReply::set_followers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tinysocialnetwork.ListReply.followers)
  followers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListReply::set_followers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  followers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tinysocialnetwork.ListReply.followers)
}
inline void ListReply::set_followers(int index, const char* value, size_t size) {
  followers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinysocialnetwork.ListReply.followers)
}
inline ::std::string* ListReply::add_followers() {
  // @@protoc_insertion_point(field_add_mutable:tinysocialnetwork.ListReply.followers)
  return followers_.Add();
}
inline void ListReply::add_followers(const ::std::string& value) {
  followers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tinysocialnetwork.ListReply.followers)
}
#if LANG_CXX11
inline void ListReply::add_followers(::std::string&& value) {
  followers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tinysocialnetwork.ListReply.followers)
}
#endif
inline void ListReply::add_followers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  followers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tinysocialnetwork.ListReply.followers)
}
inline void ListReply::add_followers(const char* value, size_t size) {
  followers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tinysocialnetwork.ListReply.followers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListReply::followers() const {
  // @@protoc_insertion_point(field_list:tinysocialnetwork.ListReply.followers)
  return followers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListReply::mutable_followers() {
  // @@protoc_insertion_point(field_mutable_list:tinysocialnetwork.ListReply.followers)
  return &followers_;
}

// string status = 3;
inline void ListReply::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListReply::status() const {
  // @@protoc_insertion_point(field_get:tinysocialnetwork.ListReply.status)
  return status_.GetNoArena();
}
inline void ListReply::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinysocialnetwork.ListReply.status)
}
#if LANG_CXX11
inline void ListReply::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tinysocialnetwork.ListReply.status)
}
#endif
inline void ListReply::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinysocialnetwork.ListReply.status)
}
inline void ListReply::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinysocialnetwork.ListReply.status)
}
inline ::std::string* ListReply::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tinysocialnetwork.ListReply.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListReply::release_status() {
  // @@protoc_insertion_point(field_release:tinysocialnetwork.ListReply.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListReply::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tinysocialnetwork.ListReply.status)
}

// -------------------------------------------------------------------

// TimelineStream

// string username = 1;
inline void TimelineStream::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TimelineStream::username() const {
  // @@protoc_insertion_point(field_get:tinysocialnetwork.TimelineStream.username)
  return username_.GetNoArena();
}
inline void TimelineStream::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinysocialnetwork.TimelineStream.username)
}
#if LANG_CXX11
inline void TimelineStream::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tinysocialnetwork.TimelineStream.username)
}
#endif
inline void TimelineStream::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinysocialnetwork.TimelineStream.username)
}
inline void TimelineStream::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinysocialnetwork.TimelineStream.username)
}
inline ::std::string* TimelineStream::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:tinysocialnetwork.TimelineStream.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TimelineStream::release_username() {
  // @@protoc_insertion_point(field_release:tinysocialnetwork.TimelineStream.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TimelineStream::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tinysocialnetwork.TimelineStream.username)
}

// string post = 2;
inline void TimelineStream::clear_post() {
  post_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TimelineStream::post() const {
  // @@protoc_insertion_point(field_get:tinysocialnetwork.TimelineStream.post)
  return post_.GetNoArena();
}
inline void TimelineStream::set_post(const ::std::string& value) {
  
  post_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinysocialnetwork.TimelineStream.post)
}
#if LANG_CXX11
inline void TimelineStream::set_post(::std::string&& value) {
  
  post_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tinysocialnetwork.TimelineStream.post)
}
#endif
inline void TimelineStream::set_post(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  post_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinysocialnetwork.TimelineStream.post)
}
inline void TimelineStream::set_post(const char* value, size_t size) {
  
  post_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinysocialnetwork.TimelineStream.post)
}
inline ::std::string* TimelineStream::mutable_post() {
  
  // @@protoc_insertion_point(field_mutable:tinysocialnetwork.TimelineStream.post)
  return post_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TimelineStream::release_post() {
  // @@protoc_insertion_point(field_release:tinysocialnetwork.TimelineStream.post)
  
  return post_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TimelineStream::set_allocated_post(::std::string* post) {
  if (post != NULL) {
    
  } else {
    
  }
  post_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), post);
  // @@protoc_insertion_point(field_set_allocated:tinysocialnetwork.TimelineStream.post)
}

// string time = 3;
inline void TimelineStream::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TimelineStream::time() const {
  // @@protoc_insertion_point(field_get:tinysocialnetwork.TimelineStream.time)
  return time_.GetNoArena();
}
inline void TimelineStream::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinysocialnetwork.TimelineStream.time)
}
#if LANG_CXX11
inline void TimelineStream::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tinysocialnetwork.TimelineStream.time)
}
#endif
inline void TimelineStream::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinysocialnetwork.TimelineStream.time)
}
inline void TimelineStream::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinysocialnetwork.TimelineStream.time)
}
inline ::std::string* TimelineStream::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:tinysocialnetwork.TimelineStream.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TimelineStream::release_time() {
  // @@protoc_insertion_point(field_release:tinysocialnetwork.TimelineStream.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TimelineStream::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:tinysocialnetwork.TimelineStream.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tinysocialnetwork

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tinysocialnetwork_2eproto__INCLUDED
