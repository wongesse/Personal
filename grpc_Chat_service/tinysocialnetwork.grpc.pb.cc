// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tinysocialnetwork.proto

#include "tinysocialnetwork.pb.h"
#include "tinysocialnetwork.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace tinysocialnetwork {

static const char* SNetwork_method_names[] = {
  "/tinysocialnetwork.SNetwork/create_user",
  "/tinysocialnetwork.SNetwork/follow",
  "/tinysocialnetwork.SNetwork/unfollow",
  "/tinysocialnetwork.SNetwork/list",
  "/tinysocialnetwork.SNetwork/timeline",
};

std::unique_ptr< SNetwork::Stub> SNetwork::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< SNetwork::Stub> stub(new SNetwork::Stub(channel));
  return stub;
}

SNetwork::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_create_user_(SNetwork_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_follow_(SNetwork_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unfollow_(SNetwork_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_(SNetwork_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_timeline_(SNetwork_method_names[4], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status SNetwork::Stub::create_user(::grpc::ClientContext* context, const ::tinysocialnetwork::CreateRequest& request, ::tinysocialnetwork::CreateReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_create_user_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tinysocialnetwork::CreateReply>* SNetwork::Stub::Asynccreate_userRaw(::grpc::ClientContext* context, const ::tinysocialnetwork::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysocialnetwork::CreateReply>::Create(channel_.get(), cq, rpcmethod_create_user_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysocialnetwork::CreateReply>* SNetwork::Stub::PrepareAsynccreate_userRaw(::grpc::ClientContext* context, const ::tinysocialnetwork::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysocialnetwork::CreateReply>::Create(channel_.get(), cq, rpcmethod_create_user_, context, request, false);
}

::grpc::Status SNetwork::Stub::follow(::grpc::ClientContext* context, const ::tinysocialnetwork::UserRequest& request, ::tinysocialnetwork::UserReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_follow_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tinysocialnetwork::UserReply>* SNetwork::Stub::AsyncfollowRaw(::grpc::ClientContext* context, const ::tinysocialnetwork::UserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysocialnetwork::UserReply>::Create(channel_.get(), cq, rpcmethod_follow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysocialnetwork::UserReply>* SNetwork::Stub::PrepareAsyncfollowRaw(::grpc::ClientContext* context, const ::tinysocialnetwork::UserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysocialnetwork::UserReply>::Create(channel_.get(), cq, rpcmethod_follow_, context, request, false);
}

::grpc::Status SNetwork::Stub::unfollow(::grpc::ClientContext* context, const ::tinysocialnetwork::UserRequest& request, ::tinysocialnetwork::UserReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_unfollow_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tinysocialnetwork::UserReply>* SNetwork::Stub::AsyncunfollowRaw(::grpc::ClientContext* context, const ::tinysocialnetwork::UserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysocialnetwork::UserReply>::Create(channel_.get(), cq, rpcmethod_unfollow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysocialnetwork::UserReply>* SNetwork::Stub::PrepareAsyncunfollowRaw(::grpc::ClientContext* context, const ::tinysocialnetwork::UserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysocialnetwork::UserReply>::Create(channel_.get(), cq, rpcmethod_unfollow_, context, request, false);
}

::grpc::Status SNetwork::Stub::list(::grpc::ClientContext* context, const ::tinysocialnetwork::ListRequest& request, ::tinysocialnetwork::ListReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_list_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tinysocialnetwork::ListReply>* SNetwork::Stub::AsynclistRaw(::grpc::ClientContext* context, const ::tinysocialnetwork::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysocialnetwork::ListReply>::Create(channel_.get(), cq, rpcmethod_list_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysocialnetwork::ListReply>* SNetwork::Stub::PrepareAsynclistRaw(::grpc::ClientContext* context, const ::tinysocialnetwork::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysocialnetwork::ListReply>::Create(channel_.get(), cq, rpcmethod_list_, context, request, false);
}

::grpc::ClientReaderWriter< ::tinysocialnetwork::TimelineStream, ::tinysocialnetwork::TimelineStream>* SNetwork::Stub::timelineRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::tinysocialnetwork::TimelineStream, ::tinysocialnetwork::TimelineStream>::Create(channel_.get(), rpcmethod_timeline_, context);
}

::grpc::ClientAsyncReaderWriter< ::tinysocialnetwork::TimelineStream, ::tinysocialnetwork::TimelineStream>* SNetwork::Stub::AsynctimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::tinysocialnetwork::TimelineStream, ::tinysocialnetwork::TimelineStream>::Create(channel_.get(), cq, rpcmethod_timeline_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::tinysocialnetwork::TimelineStream, ::tinysocialnetwork::TimelineStream>* SNetwork::Stub::PrepareAsynctimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::tinysocialnetwork::TimelineStream, ::tinysocialnetwork::TimelineStream>::Create(channel_.get(), cq, rpcmethod_timeline_, context, false, nullptr);
}

SNetwork::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNetwork_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNetwork::Service, ::tinysocialnetwork::CreateRequest, ::tinysocialnetwork::CreateReply>(
          std::mem_fn(&SNetwork::Service::create_user), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNetwork_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNetwork::Service, ::tinysocialnetwork::UserRequest, ::tinysocialnetwork::UserReply>(
          std::mem_fn(&SNetwork::Service::follow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNetwork_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNetwork::Service, ::tinysocialnetwork::UserRequest, ::tinysocialnetwork::UserReply>(
          std::mem_fn(&SNetwork::Service::unfollow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNetwork_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNetwork::Service, ::tinysocialnetwork::ListRequest, ::tinysocialnetwork::ListReply>(
          std::mem_fn(&SNetwork::Service::list), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNetwork_method_names[4],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SNetwork::Service, ::tinysocialnetwork::TimelineStream, ::tinysocialnetwork::TimelineStream>(
          std::mem_fn(&SNetwork::Service::timeline), this)));
}

SNetwork::Service::~Service() {
}

::grpc::Status SNetwork::Service::create_user(::grpc::ServerContext* context, const ::tinysocialnetwork::CreateRequest* request, ::tinysocialnetwork::CreateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNetwork::Service::follow(::grpc::ServerContext* context, const ::tinysocialnetwork::UserRequest* request, ::tinysocialnetwork::UserReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNetwork::Service::unfollow(::grpc::ServerContext* context, const ::tinysocialnetwork::UserRequest* request, ::tinysocialnetwork::UserReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNetwork::Service::list(::grpc::ServerContext* context, const ::tinysocialnetwork::ListRequest* request, ::tinysocialnetwork::ListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNetwork::Service::timeline(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tinysocialnetwork::TimelineStream, ::tinysocialnetwork::TimelineStream>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tinysocialnetwork

